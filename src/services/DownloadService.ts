import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import { ProjectFile } from '../types';

export class DownloadService {
  static async downloadProjectFiles(
    files: ProjectFile[], 
    type: 'all' | 'app' | 'contracts',
    projectName: string = 'sei-project'
  ): Promise<void> {
    try {
      const zip = new JSZip();
      
      // Filter files based on download type
      const filteredFiles = this.filterFilesByType(files, type);
      
      if (filteredFiles.length === 0) {
        console.warn(`No files found for download type: ${type}`);
        return;
      }

      // Add files to zip
      filteredFiles.forEach(file => {
        // For app-only downloads, remove the 'app/' prefix from paths
        let zipPath = file.path;
        if (type === 'app' && file.path.startsWith('app/')) {
          zipPath = file.path.substring(4); // Remove 'app/' prefix
        }
        // For contracts-only downloads, remove the 'contracts/' prefix from paths
        else if (type === 'contracts' && file.path.startsWith('contracts/')) {
          zipPath = file.path.substring(10); // Remove 'contracts/' prefix
        }
        
        zip.file(zipPath, file.content);
      });

      // Add README with project information
      const readmeContent = this.generateReadme(type, projectName);
      zip.file('README.md', readmeContent);

      // Generate zip file
      const content = await zip.generateAsync({ type: 'blob' });
      
      // Download the file
      const fileName = this.getFileName(type, projectName);
      saveAs(content, fileName);
      
      console.log(`Downloaded ${filteredFiles.length} files as ${fileName}`);
    } catch (error) {
      console.error('Failed to download files:', error);
      throw new Error('Failed to generate download. Please try again.');
    }
  }

  private static filterFilesByType(files: ProjectFile[], type: 'all' | 'app' | 'contracts'): ProjectFile[] {
    switch (type) {
      case 'app':
        return files.filter(file => 
          file.path.startsWith('app/') && 
          !file.path.includes('node_modules') &&
          !file.path.includes('dist') &&
          !file.path.includes('build')
        );
      
      case 'contracts':
        return files.filter(file => 
          file.path.startsWith('contracts/') &&
          !file.path.includes('node_modules') &&
          !file.path.includes('cache') &&
          !file.path.includes('artifacts')
        );
      
      case 'all':
      default:
        return files.filter(file => 
          !file.path.includes('node_modules') &&
          !file.path.includes('dist') &&
          !file.path.includes('build') &&
          !file.path.includes('cache') &&
          !file.path.includes('.git')
        );
    }
  }

  private static getFileName(type: 'all' | 'app' | 'contracts', projectName: string): string {
    const timestamp = new Date().toISOString().slice(0, 10); // YYYY-MM-DD
    
    switch (type) {
      case 'app':
        return `${projectName}-webapp-${timestamp}.zip`;
      case 'contracts':
        return `${projectName}-contracts-${timestamp}.zip`;
      case 'all':
      default:
        return `${projectName}-complete-${timestamp}.zip`;
    }
  }

  private static generateReadme(type: 'all' | 'app' | 'contracts', projectName: string): string {
    const timestamp = new Date().toLocaleString();
    
    const baseReadme = `# ${projectName}

Generated by SEI Agents OS on ${timestamp}

## Project Structure

`;

    switch (type) {
      case 'app':
        return baseReadme + `This package contains the web application source code.

### Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Start the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Build for production:
   \`\`\`bash
   npm run build
   \`\`\`

### Technologies Used

- React 18
- TypeScript
- Tailwind CSS
- Vite

### Features

- Modern React application
- TypeScript for type safety
- Responsive design with Tailwind CSS
- SEI blockchain integration ready
`;

      case 'contracts':
        return baseReadme + `This package contains the smart contract source code.

### Getting Started

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Compile contracts:
   \`\`\`bash
   npx hardhat compile
   \`\`\`

3. Run tests:
   \`\`\`bash
   npx hardhat test
   \`\`\`

4. Deploy to testnet:
   \`\`\`bash
   npx hardhat run scripts/deploy.js --network sei-testnet
   \`\`\`

### Technologies Used

- Solidity
- Hardhat
- OpenZeppelin

### Features

- Production-ready smart contracts
- Comprehensive test suite
- SEI blockchain optimized
`;

      case 'all':
      default:
        return baseReadme + `This is a complete full-stack DeFi application with web interface and smart contracts.

### Project Structure

- \`app/\` - Web application (React + TypeScript)
- \`contracts/\` - Smart contracts (Solidity)
- \`agents/\` - Automated agents (Coming soon)

### Getting Started

#### Web Application
1. Navigate to the app directory:
   \`\`\`bash
   cd app
   \`\`\`

2. Install dependencies and start:
   \`\`\`bash
   npm install
   npm run dev
   \`\`\`

#### Smart Contracts
1. Navigate to the contracts directory:
   \`\`\`bash
   cd contracts
   \`\`\`

2. Install dependencies and compile:
   \`\`\`bash
   npm install
   npx hardhat compile
   \`\`\`

### Technologies Used

- **Frontend**: React 18, TypeScript, Tailwind CSS, Vite
- **Contracts**: Solidity, Hardhat, OpenZeppelin
- **Blockchain**: SEI Network

### Features

- Complete full-stack DeFi application
- Modern web interface with wallet integration
- Production-ready smart contracts
- SEI blockchain optimized
- Automated testing and deployment scripts
`;
    }
  }
}